package SeaBattle.Draw;

import SeaBattle.gamesInventory.Player;
import SeaBattle.gamesInventory.Point;

public interface IGame {
    /** Выстрел по игроку
     *
     * @param p, точка выстрела
     * @param player игрок, которому требуется провести выстрел
     * @return возвращает:
     * - (-1) если мимл
     * - (0) попадание
     * - (1) убит
     * - (2) повторная стрельба
     * - (-2) ошибка
     */
    int shootPlayer(Point p, Player player);

    /** Алгоритм простого обстрела
     * В основе лежит стрельба по случайным точкам поля исключая стрельбы в одну и туже клетку
     * или клетку, в которой не может быть корабля
     *
     * @param player игрок, по которому ведется стрельба
     */
    void simpleShoot(Player player);

    /** Расстановка кораблей случайным образом
     *
     * @param player игрок, у которого расставляем корабли
     * @param param параметр, для корректировки алгоритмов внутри метода
     * @throws Exception исключение, если контроллер застрял на создании кораблей
     */
    void setRandomShip(Player player, int param) throws Exception;

    /** расстановка методом Перельмана
     * Алгоритм работы.
     * 1. Расстановка кораблей начинается с 2-х палубного.
     * а) расстановка каждого корабля заключается в минимизации свободного места рядом
     * б) требуется размещать корабли со следующими параметрами:
     * - 4-х палубный должен иметь не более 7 свободных клеток рядом
     * - 3-х палубный должен иметь не более 6 св. клеток
     * - 2-х палубный должен иметь не более 5 св. клеток
     * в) после размещения делать маску поля занятого места, если свободных клеток не менее 50 то размещаем рандомом оставшиеся катера*
     * г) размещаем катера также как и все остальные корабли**
     */
    void setShipPerelman(Player player) throws Exception;

    /** ИИ стрельбы по кораблям
     *
     * @param player игрок, по которому проводится обстрел
     */
    void iiShoot(Player player);
}
